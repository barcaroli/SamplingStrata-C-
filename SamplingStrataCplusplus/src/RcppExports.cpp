// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Rcpp_sortDelta
IntegerVector Rcpp_sortDelta(IntegerVector x);
RcppExport SEXP _SamplingStrata_Rcpp_sortDelta(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(Rcpp_sortDelta(x));
    return rcpp_result_gen;
END_RCPP
}
// aggrStrata_RcppOpen
NumericMatrix aggrStrata_RcppOpen(DataFrame strata, int nvar, IntegerVector vett, int censiti, int dominio);
RcppExport SEXP _SamplingStrata_aggrStrata_RcppOpen(SEXP strataSEXP, SEXP nvarSEXP, SEXP vettSEXP, SEXP censitiSEXP, SEXP dominioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vett(vettSEXP);
    Rcpp::traits::input_parameter< int >::type censiti(censitiSEXP);
    Rcpp::traits::input_parameter< int >::type dominio(dominioSEXP);
    rcpp_result_gen = Rcpp::wrap(aggrStrata_RcppOpen(strata, nvar, vett, censiti, dominio));
    return rcpp_result_gen;
END_RCPP
}
// select_variables
NumericMatrix select_variables(DataFrame dati, std::string prefix, int nvar);
RcppExport SEXP _SamplingStrata_select_variables(SEXP datiSEXP, SEXP prefixSEXP, SEXP nvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dati(datiSEXP);
    Rcpp::traits::input_parameter< std::string >::type prefix(prefixSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    rcpp_result_gen = Rcpp::wrap(select_variables(dati, prefix, nvar));
    return rcpp_result_gen;
END_RCPP
}
// disjoint
IntegerMatrix disjoint(NumericVector dom);
RcppExport SEXP _SamplingStrata_disjoint(SEXP domSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type dom(domSEXP);
    rcpp_result_gen = Rcpp::wrap(disjoint(dom));
    return rcpp_result_gen;
END_RCPP
}
// m_s
NumericMatrix m_s(IntegerMatrix disj, NumericMatrix mat);
RcppExport SEXP _SamplingStrata_m_s(SEXP disjSEXP, SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type disj(disjSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(m_s(disj, mat));
    return rcpp_result_gen;
END_RCPP
}
// rowSums_Rcpp
NumericVector rowSums_Rcpp(const NumericMatrix& x);
RcppExport SEXP _SamplingStrata_rowSums_Rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rowSums_Rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// colSums_Rcpp
NumericVector colSums_Rcpp(const NumericMatrix& x);
RcppExport SEXP _SamplingStrata_colSums_Rcpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(colSums_Rcpp(x));
    return rcpp_result_gen;
END_RCPP
}
// cv_Rcpp
NumericMatrix cv_Rcpp(DataFrame errors, int ndom, int nvar);
RcppExport SEXP _SamplingStrata_cv_Rcpp(SEXP errorsSEXP, SEXP ndomSEXP, SEXP nvarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type errors(errorsSEXP);
    Rcpp::traits::input_parameter< int >::type ndom(ndomSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_Rcpp(errors, ndom, nvar));
    return rcpp_result_gen;
END_RCPP
}
// crea_a
NumericMatrix crea_a(NumericMatrix& m, NumericMatrix& s, NumericVector& nocens, NumericVector& N, NumericVector& cv, double& epsilon);
RcppExport SEXP _SamplingStrata_crea_a(SEXP mSEXP, SEXP sSEXP, SEXP nocensSEXP, SEXP NSEXP, SEXP cvSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type s(sSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nocens(nocensSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type N(NSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type cv(cvSEXP);
    Rcpp::traits::input_parameter< double& >::type epsilon(epsilonSEXP);
    rcpp_result_gen = Rcpp::wrap(crea_a(m, s, nocens, N, cv, epsilon));
    return rcpp_result_gen;
END_RCPP
}
// chromy_Rcpp
NumericVector chromy_Rcpp(NumericMatrix a, double alfatot, double diff, int iter, NumericVector alfa, NumericVector alfanext, NumericVector x, NumericVector cost, int nvar, bool realAllocation);
RcppExport SEXP _SamplingStrata_chromy_Rcpp(SEXP aSEXP, SEXP alfatotSEXP, SEXP diffSEXP, SEXP iterSEXP, SEXP alfaSEXP, SEXP alfanextSEXP, SEXP xSEXP, SEXP costSEXP, SEXP nvarSEXP, SEXP realAllocationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type alfatot(alfatotSEXP);
    Rcpp::traits::input_parameter< double >::type diff(diffSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alfa(alfaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alfanext(alfanextSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type cost(costSEXP);
    Rcpp::traits::input_parameter< int >::type nvar(nvarSEXP);
    Rcpp::traits::input_parameter< bool >::type realAllocation(realAllocationSEXP);
    rcpp_result_gen = Rcpp::wrap(chromy_Rcpp(a, alfatot, diff, iter, alfa, alfanext, x, cost, nvar, realAllocation));
    return rcpp_result_gen;
END_RCPP
}
// check_n
NumericVector check_n(NumericVector n, NumericVector N, int minnumstrat);
RcppExport SEXP _SamplingStrata_check_n(SEXP nSEXP, SEXP NSEXP, SEXP minnumstratSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type minnumstrat(minnumstratSEXP);
    rcpp_result_gen = Rcpp::wrap(check_n(n, N, minnumstrat));
    return rcpp_result_gen;
END_RCPP
}
// bethel_Rcpp
NumericVector bethel_Rcpp(DataFrame strata, DataFrame errors, int minnumstrat, bool realAllocation);
RcppExport SEXP _SamplingStrata_bethel_Rcpp(SEXP strataSEXP, SEXP errorsSEXP, SEXP minnumstratSEXP, SEXP realAllocationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type errors(errorsSEXP);
    Rcpp::traits::input_parameter< int >::type minnumstrat(minnumstratSEXP);
    Rcpp::traits::input_parameter< bool >::type realAllocation(realAllocationSEXP);
    rcpp_result_gen = Rcpp::wrap(bethel_Rcpp(strata, errors, minnumstrat, realAllocation));
    return rcpp_result_gen;
END_RCPP
}
// stdev_Rcpp
double stdev_Rcpp(DataFrame dataset, int i, double fitting, double range, int kappa);
RcppExport SEXP _SamplingStrata_stdev_Rcpp(SEXP datasetSEXP, SEXP iSEXP, SEXP fittingSEXP, SEXP rangeSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< double >::type fitting(fittingSEXP);
    Rcpp::traits::input_parameter< double >::type range(rangeSEXP);
    Rcpp::traits::input_parameter< int >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(stdev_Rcpp(dataset, i, fitting, range, kappa));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SamplingStrata_Rcpp_sortDelta", (DL_FUNC) &_SamplingStrata_Rcpp_sortDelta, 1},
    {"_SamplingStrata_aggrStrata_RcppOpen", (DL_FUNC) &_SamplingStrata_aggrStrata_RcppOpen, 5},
    {"_SamplingStrata_select_variables", (DL_FUNC) &_SamplingStrata_select_variables, 3},
    {"_SamplingStrata_disjoint", (DL_FUNC) &_SamplingStrata_disjoint, 1},
    {"_SamplingStrata_m_s", (DL_FUNC) &_SamplingStrata_m_s, 2},
    {"_SamplingStrata_rowSums_Rcpp", (DL_FUNC) &_SamplingStrata_rowSums_Rcpp, 1},
    {"_SamplingStrata_colSums_Rcpp", (DL_FUNC) &_SamplingStrata_colSums_Rcpp, 1},
    {"_SamplingStrata_cv_Rcpp", (DL_FUNC) &_SamplingStrata_cv_Rcpp, 3},
    {"_SamplingStrata_crea_a", (DL_FUNC) &_SamplingStrata_crea_a, 6},
    {"_SamplingStrata_chromy_Rcpp", (DL_FUNC) &_SamplingStrata_chromy_Rcpp, 10},
    {"_SamplingStrata_check_n", (DL_FUNC) &_SamplingStrata_check_n, 3},
    {"_SamplingStrata_bethel_Rcpp", (DL_FUNC) &_SamplingStrata_bethel_Rcpp, 4},
    {"_SamplingStrata_stdev_Rcpp", (DL_FUNC) &_SamplingStrata_stdev_Rcpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SamplingStrata(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
